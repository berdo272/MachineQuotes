using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using MachineQuotes.Models;
using Microsoft.AspNet.Identity;

namespace MachineQuotes.Controllers
{
    public class QuotesController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        // GET: Quotes
        public ActionResult Index()
        {
            if (User.IsInRole("admin"))
            {
                return View(db.Quotes.ToList());
            }
            string userId = User.Identity.GetUserId();
            
            List<Quote> userQuotes = db.Quotes.Select(m => m).Where(s => s.SalesmanId == userId).ToList();
            return View(userQuotes.ToList());
        }

        // GET: Quotes/Details/5
        public ActionResult Details(int? id)
        {
            TempData.Clear();
           
            List<Machine> Machines = new List<Machine>();

            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Quote quote = db.Quotes.Include(o => o.Machines).Include(p=>p.SelectedOptions).Where(s => s.Id == id).Single();


            if (quote == null)
            {
                return HttpNotFound();
            }
            return View(quote);
        }

        // GET: Quotes/Create
        public ActionResult Create()
        {
            TempData.Clear();
            TempData.Add("Machines", new MultiSelectList(db.Machines.ToList(), "Id", "MachineName"));
       
            return View();
        }

        // POST: Quotes/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult  Create(int[] Machines, [Bind(Include = "Id,SalesmanId,CustomerId,Date,Note")] Quote quote)
        {
            if (ModelState.IsValid)
            {
                List<int>MachineIdList = Machines.ToList();

                List<Machine> newMachines = new List<Machine>();

                foreach(int x in MachineIdList)
                {   List<Machine> add = new List<Machine>();
                    List<Option> newOptions = new List<Option>();
                    List<Option> oldOptions = db.Options.Select(o => o).Where(s => s.MachineId == x).ToList();
                    Machine newAdd = new Machine() {
                        Options = new List<Option>()
                    };
                   add.AddRange(db.Machines.Select(o => o).Where(s => s.Id == x));

                    foreach(Option o in add[0].Options)
                    {
                        Option CloneOption = new Option()
                        {
                            Description = o.Description,
                            Group = o.Group,
                            IsStandard = o.IsStandard,
                            Price = o.Price,
                        };
                        newAdd.Options.Add(CloneOption);
                    }

                    newAdd.MachineName = add[0].MachineName;
                    newAdd.Price = add[0].Price;

                    newMachines.Add(newAdd);
                };
                quote.Machines = newMachines;
                quote.SalesmanId = User.Identity.GetUserName();
                quote.Date = DateTime.Now;
                db.Quotes.Add(quote);
                db.SaveChanges();
                return RedirectToAction("Index");
            }

            return View(quote);
        }

        // GET: Quotes/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Quote quote = db.Quotes.Find(id);
            if (quote == null)
            {
                return HttpNotFound();
            }
            return View(quote);
        }

        // POST: Quotes/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "Id,SalesmanId,CustomerId,Date,Note")] Quote quote)
        {
            if (ModelState.IsValid)
            {
                db.Entry(quote).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(quote);
        }

        // GET: Quotes/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Quote quote = db.Quotes.Find(id);
            if (quote == null)
            {
                return HttpNotFound();
            }
            return View(quote);
        }

        // POST: Quotes/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Quote quote = db.Quotes.Find(id);
            db.Quotes.Remove(quote);
            db.SaveChanges();
            return RedirectToAction("Index");
        }
        public ActionResult SelectOptions(int id)
        {
            Machine machine = db.Machines.Include(o=>o.Options).Where(o=>o.Id == id).Single();



            return PartialView(machine.Options);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
